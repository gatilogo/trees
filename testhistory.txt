diff --git a/src/tests.rs b/src/tests.rs
index 8e6d1fa..c37f23c 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -127,63 +127,99 @@ pub fn it_works() {
 
     println!("\n==== Start Testing DELETE RBTree Here ====\n");
     let mut rbt2: red_black_tree::RBTree<u32> = red_black_tree::RBTree::new();
+    let mut vec_in: Vec<u32> = vec![30, 20, 40, 10];
+
+    for &x in vec_in.iter() {
+        println!("inserting {} ...", x);
+        rbt2.insert_node(x);
+        println!("size is now = {}", rbt2.size());
+        rbt2.print();
+        println!("height = {}", rbt2.height());
+        println!("leaves = {}", rbt2.count_leaves());
+        println!();
+    }
 
-    println!("Inserting 30 ...");
-    rbt2.insert_node(30);
+    println!("Deleting 10 ...");
+    rbt2.delete_node(10);
     println!("size = {}", rbt2.size());
     rbt2.print();
     println!("height = {}", rbt2.height());
-    println!("leaves = {}", rbt2.count_leaves());
+    println!("num leaves = {}", rbt2.count_leaves());
     println!();
 
-    println!("Inserting 20 ...");
-    rbt2.insert_node(20);
+    println!("Inserting 50 ...");
+    rbt2.insert_node(50);
     println!("size = {}", rbt2.size());
     rbt2.print();
     println!("height = {}", rbt2.height());
     println!("leaves = {}", rbt2.count_leaves());
     println!();
 
-    println!("Inserting 40 ...");
-    rbt2.insert_node(40);
+    println!("Deleting 20 ...");
+    rbt2.delete_node(20);
     println!("size = {}", rbt2.size());
     rbt2.print();
     println!("height = {}", rbt2.height());
-    println!("leaves = {}", rbt2.count_leaves());
+    println!("num leaves = {}", rbt2.count_leaves());
     println!();
 
-    println!("Inserting 10 ...");
-    rbt2.insert_node(10);
-    println!("size = {}", rbt2.size());
-    rbt2.print();
-    println!("height = {}", rbt2.height());
-    println!("leaves = {}", rbt2.count_leaves());
-    println!();
+    vec_in = vec![51, 52, 53, 54];
 
-    println!("Deleting 10 ...");
-    rbt2.delete_node(10);
-    println!("size = {}", rbt2.size());
-    rbt2.print();
-    println!("height = {}", rbt2.height());
-    println!("num leaves = {}", rbt2.count_leaves());
-    println!();
+    for &x in vec_in.iter() {
+        println!("inserting {} ...", x);
+        rbt2.insert_node(x);
+        println!("size is now = {}", rbt2.size());
+        rbt2.print();
+        println!("height = {}", rbt2.height());
+        println!("leaves = {}", rbt2.count_leaves());
+        println!();
+    }
 
-    println!("Inserting 50 ...");
-    rbt2.insert_node(50);
+    println!("Deleting 52 ...");
+    rbt2.delete_node(52);
     println!("size = {}", rbt2.size());
     rbt2.print();
     println!("height = {}", rbt2.height());
-    println!("leaves = {}", rbt2.count_leaves());
+    println!("num leaves = {}", rbt2.count_leaves());
     println!();
 
-    println!("Deleting 20 ...");
-    rbt2.delete_node(20);
+    println!("Deleting 53 ...");
+    rbt2.delete_node(53);
     println!("size = {}", rbt2.size());
     rbt2.print();
     println!("height = {}", rbt2.height());
     println!("num leaves = {}", rbt2.count_leaves());
     println!();
+    println!("{:?}", rbt2.root.value());
 
+}
+
pub fn ray_delete_test() {
    println!("\n==== Start Testing DELETE RBTree Here ====\n");

    let mut rbt: red_black_tree::RBTree<u32> = red_black_tree::RBTree::new();
    let mut vec_in: Vec<u32> = vec![5, 70, 35, 8, 98, 60, 99, 99, 1, 84, 17];

    for &x in vec_in.iter() {
        println!("inserting {} ...", x);
        rbt.insert_node(x);
        println!("size is now = {}", rbt.size());
        rbt.print();
        println!("height = {}", rbt.height());
        println!("leaves = {}", rbt.count_leaves());
        println!();
    }

    vec_in = vec![17, 84, 99, 5, 1];
    for &x in vec_in.iter() {
        println!("deleting {} ...", x);
        rbt.delete_node(x);
        println!("size is now = {}", rbt.size());
        rbt.print();
        println!("height = {}", rbt.height());
        println!("leaves = {}", rbt.count_leaves());
        println!();
    }
 
 
 }
\ No newline at end of file
